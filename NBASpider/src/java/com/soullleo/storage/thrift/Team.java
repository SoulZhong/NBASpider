/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.soullleo.storage.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Team implements org.apache.thrift.TBase<Team, Team._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Team");

  private static final org.apache.thrift.protocol.TField C_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField E_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("eCity", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField C_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("cCity", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TeamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TeamTupleSchemeFactory());
  }

  public String cName; // required
  public String eCity; // required
  public String cCity; // required
  public String nickName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    C_NAME((short)1, "cName"),
    E_CITY((short)2, "eCity"),
    C_CITY((short)3, "cCity"),
    NICK_NAME((short)4, "nickName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // C_NAME
          return C_NAME;
        case 2: // E_CITY
          return E_CITY;
        case 3: // C_CITY
          return C_CITY;
        case 4: // NICK_NAME
          return NICK_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.C_NAME, new org.apache.thrift.meta_data.FieldMetaData("cName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E_CITY, new org.apache.thrift.meta_data.FieldMetaData("eCity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.C_CITY, new org.apache.thrift.meta_data.FieldMetaData("cCity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Team.class, metaDataMap);
  }

  public Team() {
  }

  public Team(
    String cName,
    String eCity,
    String cCity,
    String nickName)
  {
    this();
    this.cName = cName;
    this.eCity = eCity;
    this.cCity = cCity;
    this.nickName = nickName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Team(Team other) {
    if (other.isSetCName()) {
      this.cName = other.cName;
    }
    if (other.isSetECity()) {
      this.eCity = other.eCity;
    }
    if (other.isSetCCity()) {
      this.cCity = other.cCity;
    }
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
  }

  public Team deepCopy() {
    return new Team(this);
  }

  @Override
  public void clear() {
    this.cName = null;
    this.eCity = null;
    this.cCity = null;
    this.nickName = null;
  }

  public String getCName() {
    return this.cName;
  }

  public Team setCName(String cName) {
    this.cName = cName;
    return this;
  }

  public void unsetCName() {
    this.cName = null;
  }

  /** Returns true if field cName is set (has been assigned a value) and false otherwise */
  public boolean isSetCName() {
    return this.cName != null;
  }

  public void setCNameIsSet(boolean value) {
    if (!value) {
      this.cName = null;
    }
  }

  public String getECity() {
    return this.eCity;
  }

  public Team setECity(String eCity) {
    this.eCity = eCity;
    return this;
  }

  public void unsetECity() {
    this.eCity = null;
  }

  /** Returns true if field eCity is set (has been assigned a value) and false otherwise */
  public boolean isSetECity() {
    return this.eCity != null;
  }

  public void setECityIsSet(boolean value) {
    if (!value) {
      this.eCity = null;
    }
  }

  public String getCCity() {
    return this.cCity;
  }

  public Team setCCity(String cCity) {
    this.cCity = cCity;
    return this;
  }

  public void unsetCCity() {
    this.cCity = null;
  }

  /** Returns true if field cCity is set (has been assigned a value) and false otherwise */
  public boolean isSetCCity() {
    return this.cCity != null;
  }

  public void setCCityIsSet(boolean value) {
    if (!value) {
      this.cCity = null;
    }
  }

  public String getNickName() {
    return this.nickName;
  }

  public Team setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case C_NAME:
      if (value == null) {
        unsetCName();
      } else {
        setCName((String)value);
      }
      break;

    case E_CITY:
      if (value == null) {
        unsetECity();
      } else {
        setECity((String)value);
      }
      break;

    case C_CITY:
      if (value == null) {
        unsetCCity();
      } else {
        setCCity((String)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case C_NAME:
      return getCName();

    case E_CITY:
      return getECity();

    case C_CITY:
      return getCCity();

    case NICK_NAME:
      return getNickName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case C_NAME:
      return isSetCName();
    case E_CITY:
      return isSetECity();
    case C_CITY:
      return isSetCCity();
    case NICK_NAME:
      return isSetNickName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Team)
      return this.equals((Team)that);
    return false;
  }

  public boolean equals(Team that) {
    if (that == null)
      return false;

    boolean this_present_cName = true && this.isSetCName();
    boolean that_present_cName = true && that.isSetCName();
    if (this_present_cName || that_present_cName) {
      if (!(this_present_cName && that_present_cName))
        return false;
      if (!this.cName.equals(that.cName))
        return false;
    }

    boolean this_present_eCity = true && this.isSetECity();
    boolean that_present_eCity = true && that.isSetECity();
    if (this_present_eCity || that_present_eCity) {
      if (!(this_present_eCity && that_present_eCity))
        return false;
      if (!this.eCity.equals(that.eCity))
        return false;
    }

    boolean this_present_cCity = true && this.isSetCCity();
    boolean that_present_cCity = true && that.isSetCCity();
    if (this_present_cCity || that_present_cCity) {
      if (!(this_present_cCity && that_present_cCity))
        return false;
      if (!this.cCity.equals(that.cCity))
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Team other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Team typedOther = (Team)other;

    lastComparison = Boolean.valueOf(isSetCName()).compareTo(typedOther.isSetCName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cName, typedOther.cName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetECity()).compareTo(typedOther.isSetECity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetECity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eCity, typedOther.eCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCCity()).compareTo(typedOther.isSetCCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cCity, typedOther.cCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(typedOther.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, typedOther.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Team(");
    boolean first = true;

    sb.append("cName:");
    if (this.cName == null) {
      sb.append("null");
    } else {
      sb.append(this.cName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eCity:");
    if (this.eCity == null) {
      sb.append("null");
    } else {
      sb.append(this.eCity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cCity:");
    if (this.cCity == null) {
      sb.append("null");
    } else {
      sb.append(this.cCity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TeamStandardSchemeFactory implements SchemeFactory {
    public TeamStandardScheme getScheme() {
      return new TeamStandardScheme();
    }
  }

  private static class TeamStandardScheme extends StandardScheme<Team> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Team struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // C_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cName = iprot.readString();
              struct.setCNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // E_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eCity = iprot.readString();
              struct.setECityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // C_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cCity = iprot.readString();
              struct.setCCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Team struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cName != null) {
        oprot.writeFieldBegin(C_NAME_FIELD_DESC);
        oprot.writeString(struct.cName);
        oprot.writeFieldEnd();
      }
      if (struct.eCity != null) {
        oprot.writeFieldBegin(E_CITY_FIELD_DESC);
        oprot.writeString(struct.eCity);
        oprot.writeFieldEnd();
      }
      if (struct.cCity != null) {
        oprot.writeFieldBegin(C_CITY_FIELD_DESC);
        oprot.writeString(struct.cCity);
        oprot.writeFieldEnd();
      }
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TeamTupleSchemeFactory implements SchemeFactory {
    public TeamTupleScheme getScheme() {
      return new TeamTupleScheme();
    }
  }

  private static class TeamTupleScheme extends TupleScheme<Team> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Team struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCName()) {
        optionals.set(0);
      }
      if (struct.isSetECity()) {
        optionals.set(1);
      }
      if (struct.isSetCCity()) {
        optionals.set(2);
      }
      if (struct.isSetNickName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCName()) {
        oprot.writeString(struct.cName);
      }
      if (struct.isSetECity()) {
        oprot.writeString(struct.eCity);
      }
      if (struct.isSetCCity()) {
        oprot.writeString(struct.cCity);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Team struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.cName = iprot.readString();
        struct.setCNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.eCity = iprot.readString();
        struct.setECityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cCity = iprot.readString();
        struct.setCCityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
    }
  }

}

